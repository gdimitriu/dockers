################################## KUBERNETES ##############################################
# namespaces is used for very large teams or systems
# a service organize multiple pods
# selector will be checked constantly
# services are discoverable via env or dns
# node could be physical or virtual machines
# nodes control pods via services: docker, kubelet, kube-proxy
# an Ip is given to the services and comunicate with pods
# each container has a target port that accept external requests
# pod can be deteleted and re-created anytime but the endpoints will not change
# nslookup on any application will return internal address given by the dns
# 
#links
https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux
https://kubernetes.io/docs/tasks/tools/install-minikube/

#install kubectl
$ curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
#install kubelet and kubeadm from official site debian packages

#or 
$ sudo apt-get update && sudo apt-get install -y apt-transport-https
$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
$ echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
$ sudo apt-get update
$ sudo apt-get install -y kubectl

#install minikube
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
$ chmod +x minukube
$ sudo install minikube /usr/local/bin/


#start the minikube
$ minikube start --vm-driver=<driver_name>
$ minikube status
$ kubectl version
$ kubectl config current-context
$ kubectl get-contexts
$ kubectl config use-context minikube
$ kubectl get nodes
$ kubectl cluster-info

#update bash completion
$ echo 'source <(kubectl completion bash)' >>~/.bashrc
$ kubectl completion bash > kubectl
$ sudo mv kubectl /etc/bash_completion.d/

#it is ok to have workers in hybrid OS : linux an Windows Server 2010 from kubernetes 1.10

#useful commands

https://kubernetes.io/docs/reference/kubectl/cheatsheet/

#MINIKUBE does not have LoadBallancer integrated so you should use an external one or emulate but is not working ...
$ minikube tunnel

#To describe a pod use :
$ kubectl describe pod/<name Of Pod>

#To see the persisted volume claim use
$ kubectl get pvc

#To enter into a pod use:
$ kubectl exec -it <NameOfPod> -- /bin/sh

#example:
$ kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4
$ kubectl expose deployment hello-minikube --type=NodePort --port=8080
$ minikube service hello-minikube

##
$ kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080 deployment "hello-minikube" created
$ kubectl expose deployment hello-minikube --type=NodePort service "hello-minikube" exposed
$ kubectl service hello-minikube --url

#full scale deployment example
$ git clone https://github.com/bluewhalebook/docker-up-and-running-2nd-edition.git

$ http://192.168.99.110:30171/documents/docker-up-and-running-public/sample.pdf?page=1

#bubernetes and load balancer

https://blog.codonomics.com/2019/02/loadbalancer-support-with-minikube-for-k8s.html

https://metallb.universe.tf/installation/network-addons/

https://stackoverflow.com/questions/44110876/kubernetes-service-external-ip-pending

https://faun.pub/metallb-configuration-in-minikube-to-enable-kubernetes-service-of-type-loadbalancer-9559739787df

https://medium.com/swlh/kubernetes-external-ip-service-type-5e5e9ad62fcd

#ClusterIp is used for services that are not supposed to be seen outside of cluster in contrast with NodePort and LoadBalancer
#StatefulSet is used for db and persistence in contrast with ReplicaSet

#kubectl edit <service> could be used to modify running service for blue-green roll

#Secret created manually using base64 with kind Secret and type Opaque and data with secret could be retrieved back using kubectl get secrets/<secretName> -o yaml
#it should be created using kubectl command like
$ kubectl create secret generic pets-secret-prod --from-file=./username.txt --from-file=./password.txt
#to be used use in yaml the:
#volumeMounts:
# - name: secrets
#   mountPath: "/etc/secrets"
#   readOnly: true
#volumes:
# - name: secrets
#   secret:
#      secretName: pets-secret
#to be available in env use:
# env:
# - name: <PETS_USERNAME>
#   valueFrom:
#	secretKeyRef:
#		name:
#		key

##dont forget to delete the deployment then everyting is deleted otherwise the replicaset will be created each time

kubectl run kuard --generator=run-pod/v1 --image=gcr.io/kuar-demo/kuard-amd64:blue
kubectl get pods
docker run -d --name kuard --publish 8080:8080  gcr.io/kuar-demo/kuard-amd64:blue
kubectl apply -f kuard-pod.yaml
kubectl delete pods/kuard
#or using
kubectl delete -f kuard-pod.yaml
kubectl describe pods kuard
#expose the internal port to external 8090
kubectl port-forward kuard 8090:8080
#getting logs
kubectl logs kuard
#adding --previous will get log from the previous container
# execute operations in container
kubectl exec kuard date
kubectl exec -it kuard ash
# kubectl cp <source> <destination>
#for pod use <pod-name>:<file>
#package to extend kubectl io.kubernetes.client.extended.kubectl
#use https://github.com/open-policy-agent/conftest to access the policy of the Gatekeeper
#to install Gatekeeper
kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.5/deploy/gatekeeper.yaml
#to validate that is running
kubectl get pods -n gatekeeper-system
#to validate how webhook is configured
kubectl get validatingwebhookconfiguration -o yaml
#audit
kubectl get constraint repo-is-kuar-demo -o yaml


