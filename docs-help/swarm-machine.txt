############################### Docker Swarm ######################################################
############################### Deprecated and removed ############################################
# use the eval$(docker-machine evn <machine_name>)
#Only one manager node for dev, test and demo, three manager in small to medium size swarm and five managers for large to extra large swarms
#a worker communicate only with three neighbors
#init the swarm using
$ docker swarm init
#join to the swarm
$ docker swarm join --token <join-token> <IP address>:2377
#where <join-token> is a token generated by the swarm leader and <IP address> is the address of the leader
#to list the nodes into the swarm use
$ docker node ls
#then using inspect find the ip

#create the default machine for
$ docker-machine create --driver virtualbox default
# driver vmwarefusion or virtualbox
#start the default machine
$ docker-machine start default

#create the swarm
# get IP of Swarm leader
$ export IP=$(docker-machine ip node-1)
# init the Swarm
$ docker-machine ssh node-1 docker swarm init --advertise-addr $IP
# Get the Swarm join-token
$ export JOIN_TOKEN=$(docker-machine ssh node-1 docker swarm join-token worker -q)\
#join the swarm
$ docker-machine ssh $NODE_NAME docker swarm join --token $JOIN_TOKEN $IP:2377
#to promote a leader use docker node promote <nameOfNode>

#script to create auto
alias dm="docker-machine"
for NODE in `seq 1 5`; do
  NODE_NAME=node-${NODE}
  dm rm --force $NODE_NAME
  dm create --driver virtualbox $NODE_NAME
done
alias dms="docker-machine ssh"
export IP=$(docker-machine ip node-1)
dms node-1 docker swarm init --advertise-addr $IP;
export JOIN_TOKEN=$(dms node-1 docker swarm join-token worker -q);
for NODE in `seq 2 5`; do
  NODE_NAME="node-${NODE}"
  dms $NODE_NAME docker swarm join --token $JOIN_TOKEN $IP:2377
done;
dms node-1 docker node promote node-2 node-3

#to deploy a stack configuration to the docker swarm use:
$ docker stack deploy -c <stack.yaml> <nameOfStack>
#to list the stacks use:
$ docker stack ls
#to list services use:
$ docker service ls

#in yml the update_config: is used for rolling update using parallelism mean batches and delay between batches failure_action: <rollback> is used to know what to do if it fail, monitor: <time> is used to define how long newly deployed task should be monitored for health as a decision point whether or not to continue with the next batch
#in yml the expose port is <hostPort>:<containerPort>
#all logs are agregated into the call docker service logs without containter id. if you want logs from a specific container  add the task id which could be obtained using docker service ps
#if a node is stopped and then it return to started he will not get back the old tasks but it will be ready for a new workload

#healthcheck: has test:[....] interval: timeout: retries: start_period:
#Docker swarm could not be used to have blue-green deploy strategy

#Secrets created from stdin:
$ echo "sample secret value" | docker secret create sample-secret - 
#Secrets created from file:
$ docker secret create other-secret <filePath>

#Secrets are used by services and usually they are asigned to a service at creation like
$ docker service create --name web --secret api-secret-key --publish 8000:8000 fundamentalsofdocker/whoami:latest
#The secret will be in running container at /run/secrets/<secret-key>
#it could be customized like :
$ docker service create --name web -p 8000:8000 --secret source=api-secret-key,target=/run/my-secrets/api-secret-key fundamentalsofdocker/whoami:latest

#to simulate secrets in dev environment:
$ docker container run -d --name whoami -p 8000:8000 -v $(pwd)/dev-secrets:/run/secrets fundamentalsofdocker/whoami:latest

#for legacy application which use yaml 
file=/app/bin/app.conf
demo_secret=`cat /run/secret/demo-secret`
sed -i "s/<<demo-secret-value>>/$demo_secret/g" "$file"

#To update secrets into a running service first remove it
$ docker service update --secret-rm db-password web
#then add the update secret
$ docker service update --secret-add source=db-password-v2, target=db-password web

 
